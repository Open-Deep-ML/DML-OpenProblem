{
  "id": "5",
  "title": "Scalar Multiplication of a Matrix",
  "difficulty": "easy",
  "category": "Linear Algebra",
  "video": "https://youtu.be/iE2NvpvZRBk",
  "likes": "0",
  "dislikes": "0",
  "contributor": [
    {
      "profile_link": "https://github.com/moe18",
      "name": "Moe Chabot"
    }
  ],
  "tinygrad_difficulty": "easy",
  "pytorch_difficulty": "easy",
  "description": "Write a Python function that multiplies a matrix by a scalar and returns the result.",
  "learn_section": "\n## Scalar Multiplication of a Matrix\n\nWhen a matrix $A$ is multiplied by a scalar $k$, the operation is defined as multiplying each element of $A$ by $k$.\n\nGiven a matrix $A$:\n$$\nA = \\begin{pmatrix} \na_{11} & a_{12} \\\\ \na_{21} & a_{22} \n\\end{pmatrix}\n$$\n\nAnd a scalar $k$, the result of the scalar multiplication $kA$ is:\n$$\nkA = \\begin{pmatrix} \nka_{11} & ka_{12} \\\\ \nka_{21} & ka_{22} \n\\end{pmatrix}\n$$\n\nThis operation scales the matrix by $k$ without changing its dimension or the relative proportion of its elements.",
  "starter_code": "def scalar_multiply(matrix: list[list[int|float]], scalar: int|float) -> list[list[int|float]]:\n\treturn result",
  "solution": "def scalar_multiply(matrix: list[list[int|float]], scalar: int|float) -> list[list[int|float]]:\n    return [[element * scalar for element in row] for row in matrix]",
  "example": {
    "input": "matrix = [[1, 2], [3, 4]], scalar = 2",
    "output": "[[2, 4], [6, 8]]",
    "reasoning": "Each element of the matrix is multiplied by the scalar."
  },
  "test_cases": [
    {
      "test": "print(scalar_multiply([[1,2],[3,4]], 2))",
      "expected_output": "[[2, 4], [6, 8]]"
    },
    {
      "test": "print(scalar_multiply([[0,-1],[1,0]], -1))",
      "expected_output": "[[0, 1], [-1, 0]]"
    }
  ],
  "tinygrad_starter_code": "from tinygrad.tensor import Tensor\n\ndef scalar_multiply_tg(matrix, scalar) -> Tensor:\n    \"\"\"\n    Multiply each element of a 2D matrix by a scalar using tinygrad.\n    Inputs can be Python lists, NumPy arrays, or tinygrad Tensors.\n    Returns a 2D Tensor of the same shape.\n    \"\"\"\n    # Convert input to Tensor\n    m_t = Tensor(matrix)\n    # Your implementation here\n    pass",
  "tinygrad_solution": "from tinygrad.tensor import Tensor\n\ndef scalar_multiply_tg(matrix, scalar) -> Tensor:\n    \"\"\"\n    Multiply each element of a 2D matrix by a scalar using tinygrad.\n    Inputs can be Python lists, NumPy arrays, or tinygrad Tensors.\n    Returns a 2D Tensor of the same shape.\n    \"\"\"\n    m_t = Tensor(matrix)\n    return m_t * scalar",
  "tinygrad_test_cases": [
    {
      "test": "from tinygrad.tensor import Tensor\nres = scalar_multiply_tg(\n    [[1, 2], [3, 4]],\n    3\n)\nprint(res.numpy().tolist())",
      "expected_output": "[[3, 6], [9, 12]]"
    },
    {
      "test": "from tinygrad.tensor import Tensor\nres = scalar_multiply_tg(\n    [[1.5, 2.5], [3.0, 4.0]],\n    2.0\n)\nprint(res.numpy().tolist())",
      "expected_output": "[[3.0, 5.0], [6.0, 8.0]]"
    }
  ],
  "pytorch_starter_code": "import torch\n\ndef scalar_multiply(matrix, scalar) -> torch.Tensor:\n    \"\"\"\n    Multiply each element of a 2D matrix by a scalar using PyTorch.\n    Inputs can be Python lists, NumPy arrays, or torch Tensors.\n    Returns a 2D tensor of the same shape.\n    \"\"\"\n    # Convert input to tensor\n    m_t = torch.as_tensor(matrix, dtype=torch.float)\n    # Your implementation here\n    pass",
  "pytorch_solution": "import torch\n\ndef scalar_multiply(matrix, scalar) -> torch.Tensor:\n    \"\"\"\n    Multiply each element of a 2D matrix by a scalar using PyTorch.\n    Inputs can be Python lists, NumPy arrays, or torch Tensors.\n    Returns a 2D tensor of the same shape.\n    \"\"\"\n    m_t = torch.as_tensor(matrix, dtype=torch.float)\n    return m_t * scalar",
  "pytorch_test_cases": [
    {
      "test": "import torch\nres = scalar_multiply(\n    torch.tensor([[1, 2], [3, 4]], dtype=torch.float),\n    3\n)\nprint(res.numpy().tolist())",
      "expected_output": "[[3.0, 6.0], [9.0, 12.0]]"
    },
    {
      "test": "import torch\nres = scalar_multiply(\n    torch.tensor([[1.5, 2.5], [3.0, 4.0]], dtype=torch.float),\n    2.0\n)\nprint(res.numpy().tolist())",
      "expected_output": "[[3.0, 5.0], [6.0, 8.0]]"
    }
  ]
}