{
  "id": "71",
  "title": "Calculate Root Mean Square Error (RMSE)",
  "difficulty": "easy",
  "category": "Machine Learning",
  "video": "",
  "likes": "0",
  "dislikes": "0",
  "contributor": [
    {
      "profile_link": "https://github.com/saitiger",
      "name": "Sai Tiger Raina"
    }
  ],
  "description": "\n## Task: Compute Root Mean Square Error (RMSE)\n\nIn this task, you are required to implement a function `rmse(y_true, y_pred)` that calculates the Root Mean Square Error (RMSE) between the actual values and the predicted values. RMSE is a commonly used metric for evaluating the accuracy of regression models, providing insight into the standard deviation of residuals.\n\n### Your Task:\nImplement the function `rmse(y_true, y_pred)` to:\n1. Calculate the RMSE between the arrays `y_true` and `y_pred`.\n2. Return the RMSE value rounded to three decimal places.\n3. Ensure the function handles edge cases such as:\n   - Mismatched array shapes.\n   - Empty arrays.\n   - Invalid input types.\n\nThe RMSE is defined as:\n\n$$\n\\text{RMSE} = \\sqrt{\\frac{1}{n} \\sum_{i=1}^{n} (y_{\\text{true}, i} - y_{\\text{pred}, i})^2}\n$$\n\nWhere:\n- $ n $ is the number of observations.\n- $ y_{\\text{true}, i} $ and $ y_{\\text{pred}, i} $ are the actual and predicted values for the $ i $-th observation.",
  "learn_section": "\n## Root Mean Square Error (RMSE)\n\nRMSE is used to measure the accuracy of predictions in regression models. It represents the difference between the predictions and the actual values. In other words, it is the standard deviation of the residuals or prediction errors.\n\n### **Theory**\nThe RMSE is defined as:\n\n$$\n\\text{RMSE} = \\sqrt{\\frac{1}{n} \\sum_{i=1}^{n} (y_{\\text{true}_i} - y_{\\text{pred}_i})^2}\n$$\n\nwhere:\n- $ n $: The number of observations.\n- $ y_{\\text{true}_i} $: The actual values.\n- $ y_{\\text{pred}_i} $: The predicted values.\n\n### **Steps for Calculation**\n1. For each pair of actual and predicted values, calculate the difference $ y_{\\text{true}_i} - y_{\\text{pred}_i} $.\n2. Square each of these differences and find their mean.\n3. Take the square root of the mean value.\n\n### **When to Use RMSE vs. MAE**\n- **RMSE**: Used when large deviations/errors are more problematic and should be penalized more heavily.\n- **MAE**: Used when errors should be treated equally, regardless of their size.",
  "starter_code": "\nimport numpy as np\n\ndef rmse(y_true, y_pred):\n\t# Write your code here\n\treturn round(rmse_res,3)",
  "solution": "\nimport numpy as np\n\ndef rmse(y_true, y_pred):\n    if y_true.shape != y_pred.shape:\n        raise ValueError(\"Arrays must have the same shape\")\n    if y_true.size == 0:\n        raise ValueError(\"Arrays cannot be empty\")\n    return round(np.sqrt(np.mean((y_true - y_pred) ** 2)), 3)",
  "example": {
    "input": "y_true = np.array([3, -0.5, 2, 7])\ny_pred = np.array([2.5, 0.0, 2, 8])\nprint(rmse(y_true, y_pred))",
    "output": "0.612",
    "reasoning": "The RMSE is calculated as sqrt((0.5^2 + 0.5^2 + 0^2 + 1^2) / 4) = 0.612"
  },
  "test_cases": [
    {
      "test": "\n# Test Case 1: Normal Case  \ny_true1 = np.array([3, -0.5, 2, 7])\ny_pred1 = np.array([2.5, 0.0, 2, 8])\nprint(rmse(y_true1, y_pred1))\n",
      "expected_output": "0.612"
    },
    {
      "test": "\n# Test Case 2: 2D Array \ny_true2 = np.array([[0.5, 1], [-1, 1], [7, -6]])\ny_pred2 = np.array([[0, 2], [-1, 2], [8, -5]])\nprint(rmse(y_true2, y_pred2))\n",
      "expected_output": "0.842"
    },
    {
      "test": "\n# Test Case 3: Perfect predictions\ny_true3 = np.array([[1, 2], [3, 4]])\ny_pred3 = np.array([[1, 2], [3, 4]])\nprint(rmse(y_true3, y_pred3))\n",
      "expected_output": "0.0"
    }
  ]
}