{
  "id": "29",
  "title": "Random Shuffle of Dataset",
  "difficulty": "easy",
  "category": "Machine Learning",
  "video": "",
  "likes": "0",
  "dislikes": "0",
  "contributor": [
    {
      "profile_link": "https://github.com/eriklindernoren/ML-From-Scratch",
      "name": "Erik Linder-Nor√©n"
    }
  ],
  "description": "Write a Python function to perform a random shuffle of the samples in two numpy arrays, X and y, while maintaining the corresponding order between them. The function should have an optional seed parameter for reproducibility.",
  "learn_section": "\n## Understanding Dataset Shuffling\n\nRandom shuffling of a dataset is a common preprocessing step in machine learning to ensure that the data is randomly distributed before training a model. This helps to avoid any potential biases that may arise from the order in which data is presented to the model.\n\n### Step-by-Step Method to Shuffle a Dataset\n\n1. **Generate a Random Index Array**  \n   Create an array of indices corresponding to the number of samples in the dataset.\n\n2. **Shuffle the Indices**  \n   Use a random number generator to shuffle the array of indices.\n\n3. **Reorder the Dataset**  \n   Use the shuffled indices to reorder the samples in both \\( X \\) and \\( y \\).\n\n### Key Point\nThis method ensures that the correspondence between \\( X \\) and \\( y \\) is maintained after shuffling, preserving the relationship between features and labels.",
  "starter_code": "import numpy as np\n\ndef shuffle_data(X, y, seed=None):\n\t# Your code here\n\tpass",
  "solution": "import numpy as np\n\ndef shuffle_data(X, y, seed=None):\n    if seed:\n        np.random.seed(seed)\n    idx = np.arange(X.shape[0])\n    np.random.shuffle(idx)\n    return X[idx], y[idx]\n    ",
  "example": {
    "input": "X = np.array([[1, 2], \n                  [3, 4], \n                  [5, 6], \n                  [7, 8]])\n    y = np.array([1, 2, 3, 4])",
    "output": "(array([[5, 6],\n                    [1, 2],\n                    [7, 8],\n                    [3, 4]]), \n             array([3, 1, 4, 2]))",
    "reasoning": "The samples in X and y are shuffled randomly, maintaining the correspondence between the samples in both arrays."
  },
  "test_cases": [
    {
      "test": "print(shuffle_data(np.array([[1, 2], [3, 4], [5, 6], [7, 8]]), np.array([1, 2, 3, 4]), seed=42))",
      "expected_output": "(array([[3, 4], [7, 8], [1, 2], [5, 6]]), array([2, 4, 1, 3]))"
    },
    {
      "test": "print(shuffle_data(np.array([[1, 1], [2, 2], [3, 3], [4, 4]]), np.array([10, 20, 30, 40]), seed=24))",
      "expected_output": "(array([[4, 4],[2, 2],[1, 1],[3, 3]]), array([40, 20, 10, 30]))"
    }
  ]
}