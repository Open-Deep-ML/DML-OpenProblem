{
  "id": "89",
  "title": "The Pattern Weaver's Code",
  "difficulty": "medium",
  "category": "Deep Learning",
  "video": "",
  "likes": "0",
  "dislikes": "0",
  "contributor": [
    {
      "profile_link": "https://discord.gg/27N5vXdPW4",
      "name": "GroundZero AI"
    }
  ],
  "description": "Deep in the Crystal Cave, the enigmatic Pattern Weaver creates stunning sequences by uncovering the intricate relationships between crystals. Each crystal is marked by a unique numeric value, and the Weaver emphasizes that the true power of any crystal depends on how it interacts with all others. You have discovered N crystals, each with a specific value, and your task is to reveal their enhanced patterns by analyzing these relationships using self-attention. Given a sequence of crystals and their values, your task is to implement a simplified self-attention mechanism. For each crystal, calculate its relationship with every other crystal, compute the attention scores using the softmax function, and derive the final weighted pattern for each crystal. This Problem was made with the help of GroundZero AI",
  "learn_section": "## Understanding Self-Attention\n\nSelf-attention is a core concept in modern deep learning architectures, particularly transformers. It helps a model understand relationships between elements in a sequence by comparing each element with every other element.\n\n### Key Formula\n\nThe attention score between two elements $i$ and $j$ is calculated as:\n\n$$\n\\text{Attention Score}_{i,j} = \\frac{\\text{Value}_i \\times \\text{Value}_j}{\\sqrt{\\text{Dimension}}}\n$$\n\n### Softmax Function\n\nThe softmax function converts raw attention scores into probabilities:\n\n$$\n\\text{Softmax}(x_i) = \\frac{e^{x_i}}{\\sum_{j} e^{x_j}}\n$$\n\n### Weighted Sum\n\nUsing the softmax scores, the final value for each element is calculated as a weighted sum:\n\n$$\n\\text{Final Value}_i = \\sum_{j} \\text{Softmax Score}_{i,j} \\times \\text{Value}_j\n$$\n\n### Example Calculation\n\nConsider the following values:\n\n- Crystal values: $[4, 2, 7, 1, 9]$\n- Dimension: $1$\n\n#### Step 1: Calculate Attention Scores\n\nFor crystal $i = 1$ ($4$):\n\n$$\n\\text{Score}_{1,1} = \\frac{4 \\times 4}{\\sqrt{1}} = 16,\n\\quad \\text{Score}_{1,2} = \\frac{4 \\times 2}{\\sqrt{1}} = 8,\n\\ldots\n$$\n\n#### Step 2: Apply Softmax\n\nConvert scores to probabilities using softmax.\n\n#### Step 3: Compute Weighted Sum\n\nMultiply probabilities by crystal values and sum them to get the final value.\n\n### Applications\n\nSelf-attention is widely used in:\n\n- Natural Language Processing (e.g., transformers)\n- Computer Vision (e.g., Vision Transformers)\n- Sequence Analysis\n\nMastering self-attention provides a foundation for understanding advanced AI architectures.",
  "starter_code": "import numpy as np\n\ndef softmax(values):\n\t# Implement the softmax function\n\tpass\n\ndef pattern_weaver(n, crystal_values, dimension):\n\t# Your code here\n\treturn np.round(x,3)",
  "solution": "import numpy as np\n\ndef softmax(values):\n    exps = np.exp(values - np.max(values))\n    return exps / np.sum(exps)\n\ndef pattern_weaver(n, crystal_values, dimension):\n    dimension_sqrt = np.sqrt(dimension)\n    final_patterns = []\n\n    for i in range(n):\n        attention_scores = []\n        for j in range(n):\n            score = crystal_values[i] * crystal_values[j] / dimension_sqrt\n            attention_scores.append(score)\n\n        softmax_scores = softmax(attention_scores)\n        weighted_sum = sum(softmax_scores[k] * crystal_values[k] for k in range(n))\n        final_patterns.append(round(weighted_sum, 4))\n\n    return final_patterns",
  "example": {
    "input": "number of crystals: 5\nvalues: 4 2 7 1 9\n dimension: 1",
    "output": "[8.9993, 8.9638, 9.0, 8.7259, 9.0]",
    "reasoning": "The self-attention mechanism calculates relationships (attention scores) for each crystal using the given formula. These scores are converted to probabilities using the softmax function, and the final weighted pattern for each crystal is derived by summing the weighted values."
  },
  "test_cases": [
    {
      "test": "print(pattern_weaver(5, [4, 2, 7, 1, 9], 1))",
      "expected_output": "[8.9993, 8.9638, 9.0, 8.7259, 9.0]"
    },
    {
      "test": "print(pattern_weaver(3, [1, 3, 5], 1))",
      "expected_output": "[4.7019, 4.995, 4.9999]"
    },
    {
      "test": "print(pattern_weaver(4, [2, 8, 6, 4], 1))",
      "expected_output": "[7.9627, 8.0, 8.0, 7.9993]"
    }
  ]
}