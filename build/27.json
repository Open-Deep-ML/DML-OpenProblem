{
  "id": "27",
  "title": "Transformation Matrix from Basis B to C",
  "difficulty": "easy",
  "category": "Linear Algebra",
  "video": "https://youtu.be/P2LTAUO1TdA?si=O8XAmMrfpZizOr81",
  "likes": "0",
  "dislikes": "0",
  "contributor": [],
  "description": "Given basis vectors in two different bases B and C for R^3, write a Python function to compute the transformation matrix P from basis B to C.",
  "learn_section": "\n## Understanding Transformation Matrices\n\nA transformation matrix allows us to convert the coordinates of a vector in one basis to coordinates in another basis. For bases \\( B \\) and \\( C \\) of a vector space, the transformation matrix \\( P \\) from \\( B \\) to \\( C \\) is calculated as follows:\n\n### Steps to Calculate the Transformation Matrix\n1. **Inverse of Basis \\( C \\)**: First, find the inverse of the matrix representing basis \\( C \\), denoted \\( C^{-1} \\).\n2. **Matrix Multiplication**: Multiply \\( C^{-1} \\) by the matrix of basis \\( B \\). The result is the transformation matrix:\n   $$\n   P = C^{-1} \\cdot B\n   $$\n\nThis matrix \\( P \\) can be used to transform any vector coordinates from the \\( B \\) basis to the \\( C \\) basis.",
  "starter_code": "def transform_basis(B: list[list[int]], C: list[list[int]]) -> list[list[float]]:\n\treturn P",
  "solution": "import numpy as np\ndef transform_basis(B, C):\n    C = np.array(C)\n    B = np.array(B)\n    C_inv = np.linalg.inv(C)\n    P = np.dot(C_inv, B)\n    return P.tolist()",
  "example": {
    "input": "B = [[1, 0, 0], \n             [0, 1, 0], \n             [0, 0, 1]]\n        C = [[1, 2.3, 3], \n             [4.4, 25, 6], \n             [7.4, 8, 9]]",
    "output": "[[-0.6772, -0.0126, 0.2342],\n                [-0.0184, 0.0505, -0.0275],\n                [0.5732, -0.0345, -0.0569]]",
    "reasoning": "The transformation matrix P from basis B to C can be found using matrix operations involving the inverse of matrix C."
  },
  "test_cases": [
    {
      "test": "print(transform_basis([[1, 0, 0], [0, 1, 0], [0, 0, 1]], [[1, 2.3, 3], [4.4, 25, 6], [7.4, 8, 9]]))",
      "expected_output": "[[-0.6772, -0.0126, 0.2342], [-0.0184, 0.0505, -0.0275], [0.5732, -0.0345, -0.0569]]"
    },
    {
      "test": "print(transform_basis([[1,0],[0,1]],[[1,2],[9,2]]))",
      "expected_output": "[[-0.125, 0.125 ],[ 0.5625, -0.0625]]"
    }
  ]
}