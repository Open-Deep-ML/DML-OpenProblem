{
  "id": "82",
  "title": "Grayscale Image Contrast Calculator",
  "difficulty": "easy",
  "category": "Computer Vision",
  "video": "https://youtu.be/-IW2yzulQqI?si=gbdhQ5pRkwuDzaDB",
  "likes": "0",
  "dislikes": "0",
  "contributor": [
    {
      "profile_link": "https://github.com/rittik9",
      "name": "rittik9"
    }
  ],
  "marimo_link": "https://open-deep-ml.github.io/DML-OpenProblem/problem-82",
  "description": "Write a Python function to calculate the contrast of a grayscale image using the difference between the maximum and minimum pixel values.",
  "learn_section": "## Calculating Contrast of a Grayscale Image\n\nContrast in a grayscale image refers to the difference in luminance or color that makes an object distinguishable. Here are methods to calculate contrast:\n\n### 1. Basic Contrast Calculation\n\nThe simplest way to define the contrast of a grayscale image is by using the difference between the maximum and minimum pixel values:\n\n$$\n\\text{Contrast} = \\max(I) - \\min(I)\n$$\n\n### 2. RMS Contrast\n\nRoot Mean Square (RMS) contrast considers the standard deviation of pixel intensities:\n\n$$\n\\text{RMS Contrast} = \\frac{\\sigma}{\\mu}\n$$\n\n### 3. Michelson Contrast\n\nMichelson contrast is defined as:\n\n$$\nC = \\frac{I_{\\text{max}} - I_{\\text{min}}}{I_{\\text{max}} + I_{\\text{min}}}\n$$\n\n### Example Calculation\n\nFor a grayscale image with pixel values ranging from 50 to 200:\n\n1. **Maximum Pixel Value**: 200  \n2. **Minimum Pixel Value**: 50  \n3. **Contrast Calculation**:\n\n$$\n\\text{Contrast} = 200 - 50 = 150\n$$\n\n### Applications\n\nCalculating contrast is crucial in:\n\n- Image quality assessment\n- Preprocessing in computer vision\n- Enhancing visibility in images\n- Object detection and analysis",
  "starter_code": "import numpy as np\n\ndef calculate_contrast(img) -> int:\n\t\"\"\"\n\tCalculate the contrast of a grayscale image.\n\tArgs:\n\t\timg (numpy.ndarray): 2D array representing a grayscale image with pixel values between 0 and 255.\n\t\"\"\"\n\t# Your code here\n\tpass",
  "solution": "import numpy as np\n\ndef calculate_contrast(img):\n    \"\"\"\n    Calculate the contrast of a grayscale image.\n    Args:\n        img (numpy.ndarray): 2D array representing a grayscale image with pixel values between 0 and 255.\n    Returns:\n        float: Contrast value rounded to 3 decimal places.\n    \"\"\"\n    # Find the maximum and minimum pixel values\n    max_pixel = np.max(img)\n    min_pixel = np.min(img)\n\n    # Calculate contrast\n    contrast = max_pixel - min_pixel\n\n    return round(float(contrast), 3)",
  "example": {
    "input": "img = np.array([[0, 50], [200, 255]])",
    "output": "255",
    "reasoning": "The function calculates contrast by finding the difference between the maximum (255) and minimum (0) pixel values in the image, resulting in a contrast of 255."
  },
  "test_cases": [
    {
      "test": "print(calculate_contrast(np.array([[0, 50], [200, 255]])))",
      "expected_output": "255"
    },
    {
      "test": "print(calculate_contrast(np.array([[128, 128], [128, 128]])))",
      "expected_output": "0"
    },
    {
      "test": "print(calculate_contrast(np.zeros((10, 10), dtype=np.uint8)))",
      "expected_output": "0"
    },
    {
      "test": "print(calculate_contrast(np.ones((10, 10), dtype=np.uint8) * 255))",
      "expected_output": "0"
    },
    {
      "test": "print(calculate_contrast(np.array([[10, 20, 30], [40, 50, 60]])))",
      "expected_output": "50"
    }
  ]
}