{
  "id": "66",
  "title": "Implement Orthogonal Projection of a Vector onto a Line",
  "difficulty": "easy",
  "category": "Linear Algebra",
  "video": "",
  "likes": "0",
  "dislikes": "0",
  "contributor": [
    {
      "profile_link": "https://github.com/paddywardle",
      "name": "paddywardle"
    }
  ],
  "description": "## Task: Compute the Orthogonal Projection of a Vector\n\nYour task is to implement a function that calculates the orthogonal projection of a vector **v** onto another vector **L**. This projection results in the vector on **L** that is closest to **v**.\n\nWrite a function `orthogonal_projection(v, L)` that takes in two lists, `v` (the vector to be projected) and `L` (the line vector), and returns the orthogonal projection of `v` onto `L`. The function should output a list representing the projection vector rounded to three decimal places.\n\n    ",
  "learn_section": "\n## Understanding Orthogonal Projection in Vector Spaces\n\nOrthogonal projection is a fundamental concept in linear algebra, used to project one vector onto another. The projection of vector $v$ onto a line defined by vector $L$ results in a new vector that lies on $L$, representing the closest point to $v$ on that line. This can be thought of as $v$'s shadow on $L$ if a light was shown directly down on $v$.\n\nTo project a vector $v$ onto a non-zero vector $L$ in space, we calculate the scalar projection of $v$ onto the unit vector of $L$, which represents the magnitude of the projection. The resulting projection vector lies along the direction of $L$.\n\nFor any vector $v$ in Cartesian space, the orthogonal projection onto $L$ is calculated using the formula:\n\n$$\n\\text{proj}_{L} (v) = \\frac{v \\cdot L}{L \\cdot L} L\n$$\n\nWhere:\n\n1) $v$ is the vector being projected,  \n2) $L$ is the vector defining the line of projection,  \n3) $v \\cdot L$ is the dot product of $v$ and $L$,  \n4) $L \\cdot L$ is the dot product of $L$ with itself, which gives the magnitude squared of $L$.\n\nThe resulting projection vector lies along the direction of $L$ and represents the component of $v$ that is parallel to $L$.\n\nMore generally, the projection of $v$ onto a unit vector $ \\hat{L} $ (the normalized version of $L$) simplifies to:\n\n$$\n\\text{proj}_{L} (v) = (v \\cdot \\hat{L}) \\hat{L}\n$$\n\n### Applications of Orthogonal Projection\n\nOrthogonal projection has a wide range of applications across various fields in mathematics, physics, computer science, and engineering. Some of the most common applications include:\n\n1) **Computer Graphics**: In 3D rendering, orthogonal projections are used to create 2D views of 3D objects. This projection helps in reducing dimensional complexity and displaying models from different angles.\n2) **Data Science and Machine Learning**: In high-dimensional data, projection methods are used to reduce dimensions (e.g., Principal Component Analysis) by projecting data onto lower-dimensional subspaces, helping with data visualization and reducing computational complexity.",
  "starter_code": "\ndef orthogonal_projection(v, L):\n\t\"\"\"\n\tCompute the orthogonal projection of vector v onto line L.\n\n\t:param v: The vector to be projected\n\t:param L: The line vector defining the direction of projection\n\t:return: List representing the projection of v onto L\n\t\"\"\"\n\tpass",
  "solution": "def dot(v1, v2):\n    return sum([ax1 * ax2 for ax1, ax2 in zip(v1, v2)])\n\ndef scalar_mult(scalar, v):\n    return [scalar * ax for ax in v]\n\ndef orthogonal_projection(v, L):\n    L_mag_sq = dot(L, L)\n    proj_scalar = dot(v, L) / L_mag_sq\n    proj_v = scalar_mult(proj_scalar, L)\n    return [round(x, 3) for x in proj_v]",
  "example": {
    "input": "v = [3, 4]\nL = [1, 0]\nprint(orthogonal_projection(v, L))",
    "output": "[3.0, 0.0]",
    "reasoning": "The orthogonal projection of vector [3, 4] onto the line defined by [1, 0] results in the projection vector [3, 0], which lies on the line [1, 0]."
  },
  "test_cases": [
    {
      "test": "v = [3, 4]\nL = [1, 0]\nprint(orthogonal_projection(v, L))",
      "expected_output": "[3.0, 0.0]"
    },
    {
      "test": "v = [1, 2, 3]\nL = [0, 0, 1]\nprint(orthogonal_projection(v, L))",
      "expected_output": "[0.0, 0.0, 3.0]"
    },
    {
      "test": "v = [5, 6, 7]\nL = [2, 0, 0]\nprint(orthogonal_projection(v, L))",
      "expected_output": "[5.0, 0.0, 0.0]"
    }
  ]
}