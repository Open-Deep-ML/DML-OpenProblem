{
  "id": "26",
  "title": "Implementing Basic Autograd Operations",
  "difficulty": "medium",
  "category": "Deep Learning",
  "video": "https://youtu.be/VMj-3S1tku0?si=gjlnFP4o3JRN9dTg",
  "likes": "0",
  "dislikes": "0",
  "contributor": [],
  "tinygrad_difficulty": "medium",
  "pytorch_difficulty": "medium",
  "description": "Special thanks to Andrej Karpathy for making a video about this, if you haven't already check out his videos on YouTube https://youtu.be/VMj-3S1tku0?si=gjlnFP4o3JRN9dTg. Write a Python class similar to the provided 'Value' class that implements the basic autograd operations: addition, multiplication, and ReLU activation. The class should handle scalar values and should correctly compute gradients for these operations through automatic differentiation.",
  "learn_section": "\n## Understanding Mathematical Concepts in Autograd Operations\n\n*First, watch the video in the Solution section.*\n\nThis task focuses on implementing basic automatic differentiation mechanisms for neural networks. The operations of addition, multiplication, and ReLU are fundamental to neural network computations and their training through backpropagation.\n\n### Mathematical Foundations\n\n**Addition (`__add__`)**  \n- **Forward Pass**: For two scalar values \\( a \\) and \\( b \\), their sum \\( s \\) is:\n  $$\n  s = a + b\n  $$\n- **Backward Pass**: The derivative of \\( s \\) with respect to both \\( a \\) and \\( b \\) is 1. During backpropagation, the gradient of the output is passed directly to both inputs.\n\n**Multiplication (`__mul__`)**  \n- **Forward Pass**: For two scalar values \\( a \\) and \\( b \\), their product \\( p \\) is:\n  $$\n  p = a \\times b\n  $$\n- **Backward Pass**: The gradient of \\( p \\) with respect to \\( a \\) is \\( b \\), and with respect to \\( b \\) is \\( a \\). During backpropagation, each input's gradient is the product of the other input and the output's gradient.\n\n**ReLU Activation (`relu`)**  \n- **Forward Pass**: The ReLU function is defined as:\n  $$\n  R(x) = \\max(0, x)\n  $$\n  This function outputs \\( x \\) if \\( x \\) is positive, and 0 otherwise.\n- **Backward Pass**: The derivative of the ReLU function is 1 for \\( x > 0 \\) and 0 for \\( x \\leq 0 \\). The gradient is propagated through the function only if the input is positive; otherwise, it stops.\n\n### Conceptual Application in Neural Networks\n- **Addition and Multiplication**: These operations are ubiquitous in neural networks, forming the basis for computing weighted sums of inputs in the neurons.\n- **ReLU Activation**: Commonly used as an activation function in neural networks due to its simplicity and effectiveness in introducing non-linearity, making learning complex patterns possible.\n\nUnderstanding these operations and their implications on gradient flow is crucial for designing and training effective neural network models. By implementing these from scratch, you gain deeper insights into the workings of more sophisticated deep learning libraries.",
  "starter_code": "class Value:\n\tdef __init__(self, data, _children=(), _op=''):\n\t\tself.data = data\n\t\tself.grad = 0\n\t\tself._backward = lambda: None\n\t\tself._prev = set(_children)\n\t\tself._op = _op\n\tdef __repr__(self):\n\t\treturn f\"Value(data={self.data}, grad={self.grad})\"\n\n\tdef __add__(self, other):\n\t\t # Implement addition here\n\t\tpass\n\n\tdef __mul__(self, other):\n\t\t# Implement multiplication here\n\t\tpass\n\n\tdef relu(self):\n\t\t# Implement ReLU here\n\t\tpass\n\n\tdef backward(self):\n\t\t# Implement backward pass here\n\t\tpass",
  "solution": "\nclass Value:\n    def __init__(self, data, _children=(), _op=''):\n        self.data = data\n        self.grad = 0\n        self._backward = lambda: None\n        self._prev = set(_children)\n        self._op = _op\n\n    def __add__(self, other):\n        other = other if isinstance(other, Value) else Value(other)\n        out = Value(self.data + other.data, (self, other), '+')\n        def _backward():\n            self.grad += out.grad\n            other.grad += out.grad\n        out._backward = _backward\n        return out\n\n    def __mul__(self, other):\n        other = other if isinstance(other, Value) else Value(other)\n        out = Value(self.data * other.data, (self, other), '*')\n        def _backward():\n            self.grad += other.data * out.grad\n            other.grad += self.data * out.grad\n        out._backward = _backward\n        return out\n\n    def relu(self):\n        out = Value(0 if self.data < 0 else self.data, (self,), 'ReLU')\n        def _backward():\n            self.grad += (out.data > 0) * out.grad\n        out._backward = _backward\n        return out\n\n    def backward(self):\n        topo = []\n        visited = set()\n        def build_topo(v):\n            if v not in visited:\n                visited.add(v)\n                for child in v._prev:\n                    build_topo(child)\n                topo.append(v)\n        build_topo(self)\n        self.grad = 1\n        for v in reversed(topo):\n            v._backward()\n    def __repr__(self):\n        return f\"Value(data={self.data}, grad={self.grad})\"",
  "example": {
    "input": "a = Value(2)\n        b = Value(-3)\n        c = Value(10)\n        d = a + b * c\n        e = d.relu()\n        e.backward()\n        print(a, b, c, d, e)",
    "reasoning": "The output reflects the forward computation and gradients after backpropagation. The ReLU on 'd' zeros out its output and gradient due to the negative data value.",
    "output": "Value(data=2, grad=0) Value(data=-3, grad=0) Value(data=10, grad=0)"
  },
  "test_cases": [
    {
      "test": "a = Value(2);b = Value(3);c = Value(10);d = a + b * c  ;e = Value(7) * Value(2);f = e + d;g = f.relu()  \ng.backward()\nprint(a,b,c,d,e,f,g)\n",
      "expected_output": " Value(data=2, grad=1) Value(data=3, grad=10) Value(data=10, grad=3) Value(data=32, grad=1) Value(data=14, grad=1) Value(data=46, grad=1) Value(data=46, grad=1)"
    }
  ],
  "tinygrad_starter_code": "from tinygrad.tensor import Tensor\n\nclass Value:\n    \"\"\"Same idea, but using tinygradâ€™s automatic differentiation.\"\"\"\n\n    def __init__(self, data, _tensor=None):\n        self._t = _tensor if _tensor is not None else Tensor(float(data), requires_grad=True)\n\n    @property\n    def data(self):\n        return float(self._t.numpy())\n\n    @property\n    def grad(self):\n        g = self._t.grad\n        return 0 if g is None else float(g.numpy())\n\n    def __repr__(self):\n        def fmt(x):\n            return int(x) if float(x).is_integer() else round(x, 4)\n        return f\"Value(data={fmt(self.data)}, grad={fmt(self.grad)})\"\n\n    def _wrap(self, other):\n        return other if isinstance(other, Value) else Value(other)\n\n    def __add__(self, other):\n        other = self._wrap(other)\n        return Value(0, _tensor=self._t + other._t)\n\n    __radd__ = __add__\n\n    def __mul__(self, other):\n        other = self._wrap(other)\n        return Value(0, _tensor=self._t * other._t)\n\n    __rmul__ = __mul__\n\n    def relu(self):\n        return Value(0, _tensor=self._t.relu())\n\n    def backward(self):\n        self._t.backward()",
  "tinygrad_solution": "from tinygrad.tensor import Tensor\n\nclass Value:\n    def __init__(self, data, _tensor=None):\n        self._t = _tensor if _tensor is not None else Tensor(float(data), requires_grad=True)\n\n    @property\n    def data(self):\n        return float(self._t.numpy())\n\n    @property\n    def grad(self):\n        g = self._t.grad\n        return 0 if g is None else float(g.numpy())\n\n    def __repr__(self):\n        def fmt(x):\n            return int(x) if float(x).is_integer() else round(x, 4)\n        return f\"Value(data={fmt(self.data)}, grad={fmt(self.grad)})\"\n\n    def _wrap(self, other):\n        return other if isinstance(other, Value) else Value(other)\n\n    def __add__(self, other):\n        other = self._wrap(other)\n        return Value(0, _tensor=self._t + other._t)\n\n    __radd__ = __add__\n\n    def __mul__(self, other):\n        other = self._wrap(other)\n        return Value(0, _tensor=self._t * other._t)\n\n    __rmul__ = __mul__\n\n    def relu(self):\n        return Value(0, _tensor=self._t.relu())\n\n    def backward(self):\n        self._t.backward()",
  "tinygrad_test_cases": [
    {
      "test": "a = Value(2); b = Value(3); c = Value(10); d = a + b * c; e = Value(7) * Value(2); f = e + d; g = f.relu(); g.backward(); print(a, b, c, d, e, f, g)",
      "expected_output": "Value(data=2, grad=1) Value(data=3, grad=10) Value(data=10, grad=3) Value(data=32, grad=1) Value(data=14, grad=1) Value(data=46, grad=1) Value(data=46, grad=1)"
    }
  ],
  "pytorch_starter_code": "import torch\n\nclass Value:\n    \"\"\"A tiny scalar wrapper that delegates all gradient work to PyTorch autograd.\"\"\"\n\n    def __init__(self, data, _tensor=None):\n        # leaf node: create fresh tensor with grad; internal node: reuse tensor\n        self._t = _tensor if _tensor is not None else torch.tensor(float(data), requires_grad=True)\n        # make sure every Tensor (leaf or not) keeps its grad for printing\n        self._t.retain_grad()\n\n    # ------- conveniences -------\n    @property\n    def data(self):\n        return self._t.item()\n\n    @property\n    def grad(self):\n        g = self._t.grad\n        return 0 if g is None else g.item()\n\n    def __repr__(self):\n        def fmt(x):\n            return int(x) if float(x).is_integer() else round(x, 4)\n        return f\"Value(data={fmt(self.data)}, grad={fmt(self.grad)})\"\n\n    # ensure rhs is Value\n    def _wrap(self, other):\n        return other if isinstance(other, Value) else Value(other)\n\n    # ------- arithmetic ops -------\n    def __add__(self, other):\n        other = self._wrap(other)\n        return Value(0, _tensor=self._t + other._t)\n\n    __radd__ = __add__\n\n    def __mul__(self, other):\n        other = self._wrap(other)\n        return Value(0, _tensor=self._t * other._t)\n\n    __rmul__ = __mul__\n\n    # ------- activation -------\n    def relu(self):\n        return Value(0, _tensor=torch.relu(self._t))\n\n    # ------- back-prop entry -------\n    def backward(self):\n        self._t.backward()",
  "pytorch_solution": "import torch\n\nclass Value:\n    \"\"\"Scalar autograd value powered by PyTorch tensors.\"\"\"\n\n    def __init__(self, data, _tensor=None):\n        self._t = _tensor if _tensor is not None else torch.tensor(float(data), requires_grad=True)\n        self._t.retain_grad()\n\n    # ----- helpers -----\n    @property\n    def data(self):\n        return self._t.item()\n\n    @property\n    def grad(self):\n        g = self._t.grad\n        return 0 if g is None else g.item()\n\n    def __repr__(self):\n        def fmt(x):\n            return int(x) if float(x).is_integer() else round(x, 4)\n        return f\"Value(data={fmt(self.data)}, grad={fmt(self.grad)})\"\n\n    def _wrap(self, other):\n        return other if isinstance(other, Value) else Value(other)\n\n    # arithmetic\n    def __add__(self, other):\n        other = self._wrap(other)\n        return Value(0, _tensor=self._t + other._t)\n\n    __radd__ = __add__\n\n    def __mul__(self, other):\n        other = self._wrap(other)\n        return Value(0, _tensor=self._t * other._t)\n\n    __rmul__ = __mul__\n\n    # activation\n    def relu(self):\n        return Value(0, _tensor=torch.relu(self._t))\n\n    # back-prop\n    def backward(self):\n        self._t.backward()",
  "pytorch_test_cases": [
    {
      "test": "a = Value(2); b = Value(3); c = Value(10); d = a + b * c; e = Value(7) * Value(2); f = e + d; g = f.relu(); g.backward(); print(a, b, c, d, e, f, g)",
      "expected_output": "Value(data=2, grad=1) Value(data=3, grad=10) Value(data=10, grad=3) Value(data=32, grad=1) Value(data=14, grad=1) Value(data=46, grad=1) Value(data=46, grad=1)"
    }
  ]
}