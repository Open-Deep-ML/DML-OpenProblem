{
  "id": "108",
  "title": "Measure Disorder in Apple Colors",
  "difficulty": "easy",
  "category": "Machine Learning",
  "video": "",
  "likes": "0",
  "dislikes": "0",
  "contributor": [
    {
      "profile_link": "https://github.com/moe18",
      "name": "Moe Chabot"
    }
  ],
  "description": "Implement a function that calculates the disorder in a basket of apples based on their colors, where each apple color is represented by an integer. The disorder must be 0 if all apples are the same color and must increase as the variety of colors increases. In particular:\n- [0,0,0,0] should yield 0.\n- [1,1,0,0] should have a higher disorder than [0,0,0,0].\n- [0,1,2,3] should have a higher disorder than [1,1,0,0].\n- [0,0,1,1,2,2,3,3] should have a higher disorder than [0,0,0,0,0,1,2,3].\n\nYou may use any method to measure disorder as long as these properties are satisfied.",
  "learn_section": "## Using Gini Impurity to Measure Disorder\n\nOne valid approach to measure disorder in a basket of apples is to use the **Gini impurity** metric. The Gini impurity is defined as:\n\n$$\nG = 1 - \\sum_{i=1}^{k} p_i^2\n$$\n\nwhere:\n- $p_i$ is the proportion of apples of the $i$-th color.\n- $k$ is the total number of distinct colors.\n\n### Key Properties\n\n- **Single Color Case:** If all apples in the basket have the same color, then $p = 1$ and the Gini impurity is:\n  $$\n  G = 1 - 1^2 = 0\n  $$\n- **Increasing Disorder:** As the variety of colors increases, the impurity increases. For example:\n  - Two equally frequent colors:  \n    $$\n    G = 1 - \\left(0.5^2 + 0.5^2\\right) = 0.5\n    $$\n  - Four equally frequent colors:  \n    $$\n    G = 1 - \\left(4 \\times 0.25^2\\right) = 0.75\n    $$\n\n### Comparing Different Baskets\n\n1. **Basket:** `[0,0,0,0]`  \n   - Only one color -> $G = 0$\n2. **Basket:** `[1,1,0,0]`  \n   - Two colors, equal frequency -> $G = 0.5$\n3. **Basket:** `[0,1,2,3]`  \n   - Four equally frequent colors -> $G = 0.75$\n4. **Basket:** `[0,0,1,1,2,2,3,3]`  \n   - Equal distribution among four colors -> $G = 0.75$\n5. **Basket:** `[0,0,0,0,0,1,2,3]`  \n   - One dominant color, three others -> $G = 0.5625$\n\n### Flexibility\n\nWhile the Gini impurity is a suitable measure of disorder, any method that satisfies the following constraints is valid:\n1. A basket with a single color must return a disorder score of **0**.\n2. Baskets with more distinct colors must yield **higher disorder** scores.\n3. The specific ordering constraints provided in the problem must be **maintained**.\n\nBy using this impurity measure, we can quantify how diverse a basket of apples is based on color distribution.",
  "starter_code": "def disorder(apples: list) -> float:\n\t\"\"\"\n\tCompute the disorder in a basket of apples.\n\t\"\"\"\n\t# Your code here\n\tpass",
  "solution": "def disorder(apples: list) -> float:\n    \"\"\"\n    Calculates a measure of disorder in a basket of apples based on their colors.\n    One valid approach is to use the Gini impurity, defined as:\n      G = 1 - sum((count/total)^2 for each color)\n    This method returns 0 for a basket with all apples of the same color and increases as the variety of colors increases.\n    While this implementation uses the Gini impurity, any method that satisfies the following properties is acceptable:\n      1. A single color results in a disorder of 0.\n      2. Baskets with more distinct colors yield a higher disorder score.\n      3. The ordering constraints are maintained.\n    \"\"\"\n    if not apples:\n        return 0.0\n    total = len(apples)\n    counts = {}\n    for color in apples:\n        counts[color] = counts.get(color, 0) + 1\n    impurity = 1.0\n    for count in counts.values():\n        p = count / total\n        impurity -= p * p\n    return round(impurity, 4)",
  "example": {
    "input": "disorder([1,1,0,0])",
    "output": "0.5 #or any value from -inf till +inf",
    "reasoning": "In the basket [1,1,0,0], there are two distinct colors each appearing with equal frequency (0.5)."
  },
  "test_cases": [
    {
      "test": "print(disorder([0,0,0,0])<disorder([1,0,0,0]))",
      "expected_output": "True"
    },
    {
      "test": "print(disorder([0,0,0,0,0,1,2,3])<disorder([0,0,1,1,2,2,3,3]))",
      "expected_output": "True"
    },
    {
      "test": "print(disorder([1,1,0,0])<disorder([0,1,2,3]))",
      "expected_output": "True"
    }
  ]
}