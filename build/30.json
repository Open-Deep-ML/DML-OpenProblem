{
  "id": "30",
  "title": "Batch Iterator for Dataset",
  "difficulty": "easy",
  "category": "Machine Learning",
  "video": "https://youtu.be/_Ox2PUBpkMw?si=oiWBJezQQoREIHPU",
  "likes": "0",
  "dislikes": "0",
  "contributor": [
    {
      "profile_link": "https://github.com/eriklindernoren/ML-From-Scratch",
      "name": "Erik Linder-Nor√©n"
    }
  ],
  "description": "Implement a batch iterable function that samples in a numpy array X and an optional numpy array y. The function should return batches of a specified size. If y is provided, the function should return batches of (X, y) pairs; otherwise, it should return batches of X only.",
  "learn_section": "\n## Understanding Batch Iteration\n\nBatch iteration is a common technique used in machine learning and data processing to handle large datasets more efficiently. Instead of processing the entire dataset at once, which can be memory-intensive, data is processed in smaller, more manageable batches.\n\n### Step-by-Step Method to Create a Batch Iterator\n\n1. **Determine the Number of Samples**  \n   Calculate the total number of samples in the dataset.\n\n2. **Iterate in Batches**  \n   Loop through the dataset in increments of the specified batch size.\n\n3. **Yield Batches**  \n   For each iteration, yield a batch of samples from \\( X \\) and, if provided, the corresponding samples from \\( y \\).\n\n### Key Point\nThis method ensures efficient processing and can be used for both the training and evaluation phases in machine learning workflows.",
  "starter_code": "import numpy as np\n\ndef batch_iterator(X, y=None, batch_size=64):\n\t# Your code here\n\tpass",
  "solution": "import numpy as np\n\ndef batch_iterator(X, y=None, batch_size=64):\n    n_samples = X.shape[0]\n    batches = []\n    for i in np.arange(0, n_samples, batch_size):\n        begin, end = i, min(i+batch_size, n_samples)\n        if y is not None:\n            batches.append([X[begin:end], y[begin:end]])\n        else:\n            batches.append( X[begin:end])\n    return batches\n    ",
  "example": {
    "input": "X = np.array([[1, 2], \n                  [3, 4], \n                  [5, 6], \n                  [7, 8], \n                  [9, 10]])\n    y = np.array([1, 2, 3, 4, 5])\n    batch_size = 2\n    batch_iterator(X, y, batch_size)",
    "output": "[[[[1, 2], [3, 4]], [1, 2]],\n     [[[5, 6], [7, 8]], [3, 4]],\n     [[[9, 10]], [5]]]",
    "reasoning": "The dataset X contains 5 samples, and we are using a batch size of 2. Therefore, the function will divide the dataset into 3 batches. The first two batches will contain 2 samples each, and the last batch will contain the remaining sample. The corresponding values from y are also included in each batch."
  },
  "test_cases": [
    {
      "test": "print(batch_iterator(np.array([[1, 2], [3, 4], [5, 6], [7, 8], [9, 10]]), np.array([1, 2, 3, 4, 5]), batch_size=2))",
      "expected_output": "[[[[1, 2], [3, 4]], [1, 2]], [[[5, 6], [7, 8]], [3, 4]], [[[9, 10]], [5]]]"
    },
    {
      "test": "print(batch_iterator(np.array([[1, 1], [2, 2], [3, 3], [4, 4]]), batch_size=3))",
      "expected_output": "[[[1, 1], [2, 2], [3, 3]], [[4, 4]]]"
    }
  ]
}