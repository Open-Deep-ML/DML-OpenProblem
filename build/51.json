{
  "id": "51",
  "title": "Optimal String Alignment Distance",
  "difficulty": "medium",
  "category": "NLP",
  "video": "",
  "likes": "0",
  "dislikes": "0",
  "contributor": [
    {
      "profile_link": "https://github.com/12345pnp",
      "name": "Biplab P."
    }
  ],
  "description": "In this problem, you need to implement a function that calculates the [Optimal String Alignment (OSA)](https://en.wikipedia.org/wiki/Damerauâ€“Levenshtein_distance) distance between two given strings. The OSA distance represents the minimum number of edits required to transform one string into another. The allowed edit operations are:\n\n- Insert a character\n- Delete a character\n- Substitute a character\n- Transpose two adjacent characters\n\nEach of these operations costs 1 unit.\n\nYour task is to find the minimum number of edits needed to convert the first string (s1) into the second string (s2).\n\nFor example, the OSA distance between the strings `caper` and `acer` is 2: one deletion (removing \"p\") and one transposition (swapping \"a\" and \"c\").",
  "learn_section": "\n## Optimal String Alignment Distance\n\nGiven two strings \\( s_1 \\) and \\( s_2 \\), find the Optimal String Alignment (OSA) distance between them.\n\nThe OSA distance gives the minimum number of edits needed to transform string \\( s_1 \\) into \\( s_2 \\). Here are the allowed edit operations:\n\n1. **Insert a character**\n2. **Delete a character**\n3. **Substitute a character**\n4. **Transpose two adjacent characters**\n\nEach operation has a cost of 1 unit.\n\nFor example, the OSA distance between the strings \"caper\" and \"acer\" is 2:\n- One deletion (removing the letter 'p')\n- One transposition (swapping the letters 'a' and 'c')",
  "starter_code": "def OSA(source: str, target: str) -> int:\n\t# Your code here\n\tpass",
  "solution": "import numpy as np\n\ndef OSA(source: str, target: str) -> int:\n    source_len, target_len = len(source), len(target)\n\n    # Initialize matrix with zeros\n    osa_matrix = [[0] * (target_len + 1) for _ in range(source_len + 1)]\n\n    # Fill the first row and first column with index values\n    for j in range(1, target_len + 1):\n        osa_matrix[0][j] = j\n    for i in range(1, source_len + 1):\n        osa_matrix[i][0] = i\n\n    # Compute the OSA distance\n    for i in range(1, source_len + 1):\n        for j in range(1, target_len + 1):\n            osa_matrix[i][j] = min(\n                osa_matrix[i - 1][j] + 1,  # Deletion\n                osa_matrix[i][j - 1] + 1,  # Insertion\n                osa_matrix[i - 1][j - 1] + (1 if source[i - 1] != target[j - 1] else 0)  # Substitution\n            )\n            if i > 1 and j > 1 and source[i - 1] == target[j - 2] and source[i - 2] == target[j - 1]:\n                osa_matrix[i][j] = min(osa_matrix[i][j], osa_matrix[i - 2][j - 2] + 1)  # Transposition\n\n    return osa_matrix[-1][-1]",
  "example": {
    "input": "source = \"butterfly\"\ntarget = \"dragonfly\"\n\ndistance = OSA(source, target)\nprint(distance)",
    "output": "6",
    "reasoning": "The OSA distance between the strings \"butterfly\" and \"dragonfly\" is 6. The minimum number of edits required to transform the source string into the target string is 6."
  },
  "test_cases": [
    {
      "test": "source = \"butterfly\"\ntarget = \"dragonfly\"\noutput = OSA(source, target)\nprint(output)",
      "expected_output": "6"
    },
    {
      "test": "source = \"caper\"\ntarget = \"acer\"\noutput = OSA(source, target)\nprint(output)",
      "expected_output": "2"
    },
    {
      "test": "source = \"telescope\"\ntarget = \"microscope\"\noutput = OSA(source, target)\nprint(output)",
      "expected_output": "5"
    },
    {
      "test": "source = \"london\"\ntarget = \"paris\"\noutput = OSA(source, target)\nprint(output)",
      "expected_output": "6"
    }
  ]
}