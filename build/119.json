{
  "id": "119",
  "title": "Solve System of Linear Equations Using Cramer's Rule",
  "difficulty": "medium",
  "category": "Linear Algebra for Machine Learning",
  "video": "",
  "likes": "0",
  "dislikes": "0",
  "contributor": [
    {
      "profile_link": "https://github.com/moe18",
      "name": "Moe Chabot"
    }
  ],
  "description": "Implement a function to solve a system of linear equations $Ax = b$ using Cramer's Rule. The function should take a square coefficient matrix $A$ and a constant vector $b$, and return the solution vector $x$. If the system has no unique solution (i.e., the determinant of $A$ is zero), return -1.",
  "learn_section": "## Understanding Cramer's Rule\n\nCramer's Rule is a method to solve a system of linear equations $Ax = b$ using determinants.\n\n### Requirements\n- The coefficient matrix $A$ must be square ($n \\times n$).\n- The determinant of $A$, $\\det(A)$, must be non-zero for a unique solution to exist.\n\n### Formula\nFor each variable $x_i$, replace the $i$-th column of $A$ with vector $b$ and compute:\n\n$$\nx_i = \\frac{\\det(A_i)}{\\det(A)}\n$$\n\nWhere:\n- $A_i$ is the matrix formed by replacing the $i$-th column of $A$ with $b$\n- $\\det(A)$ is the determinant of the original matrix $A$\n\n### Steps\n1. Compute $\\det(A)$. If it's 0, return -1.\n2. For each variable $x_i$:\n   - Replace column $i$ in $A$ with $b$\n   - Compute $\\det(A_i)$\n   - Compute $x_i = \\frac{\\det(A_i)}{\\det(A)}$\n\n### Example\nGiven:\n\n$$\nA = \\begin{bmatrix} 2 & -1 & 3 \\\\ 4 & 2 & 1 \\\\ -6 & 1 & -2 \\end{bmatrix}, \\quad b = \\begin{bmatrix} 5 \\\\ 10 \\\\ -3 \\end{bmatrix}\n$$\n\n1. $\\det(A) = -36.0$\n2. Replace each column with $b$:\n\n- $\\det(A_1) = -6.0$\n- $\\det(A_2) = -120.0$\n- $\\det(A_3) = -96.0$\n\nThen,\n\n$$\nx = \\left[ \\frac{-6}{-36}, \\frac{-120}{-36}, \\frac{-96}{-36} \\right] = [0.1667, 3.3333, 2.6667]\n$$\n\n### Applications\n- Solving small systems of equations\n- Useful in theoretical linear algebra\n- Not practical for large matrices due to computational cost",
  "starter_code": "import numpy as np\n\ndef cramers_rule(A, b):\n    # Your code here\n    pass",
  "solution": "import numpy as np\n\ndef cramers_rule(A, b):\n    A = np.array(A, dtype=float)\n    b = np.array(b, dtype=float)\n\n    n, m = A.shape\n    if n != m or b.shape[0] != n:\n        return -1\n\n    det_A = np.linalg.det(A)\n    if np.isclose(det_A, 0):\n        return -1\n\n    x = np.zeros(n)\n    for i in range(n):\n        A_mod = A.copy()\n        A_mod[:, i] = b\n        det_A_mod = np.linalg.det(A_mod)\n        x[i] = det_A_mod / det_A\n\n    return x",
  "example": {
    "input": "A = [[2, -1, 3], [4, 2, 1], [-6, 1, -2]], b = [5, 10, -3]",
    "output": "[0.1667 3.3333 2.6667]",
    "reasoning": "We compute the determinant of A and then replace each column with vector b to compute the determinants of modified matrices. These are then used in the formula $x_i = \\frac{\\det(A_i)}{\\det(A)}$ to get the solution."
  },
  "test_cases": [
    {
      "test": "print(np.round(cramers_rule([[2, -1, 3], [4, 2, 1], [-6, 1, -2]], [5, 10, -3]), 4))",
      "expected_output": "[0.1667, 3.3333, 2.6667]"
    },
    {
      "test": "print(np.round(cramers_rule([[1, 2], [3, 4]], [5, 6]), 4))",
      "expected_output": "[-4.,4.5]"
    },
    {
      "test": "print(cramers_rule([[1, 2], [2, 4]], [3, 6]))",
      "expected_output": "-1"
    }
  ]
}