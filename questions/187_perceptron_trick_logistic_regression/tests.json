[
  {
    "test": "from questions.187_perceptron_trick_logistic_regression.solution import perceptron_trick; w, pred = perceptron_trick([[1,1], [2,2], [3,3]], [1, 1, -1], 0.1, 10); print([round(x, 3) for x in w], pred)",
    "expected_output": "[-0.2, -0.2, 0.0] [1, 1, -1]"
  },
  {
    "test": "from questions.187_perceptron_trick_logistic_regression.solution import perceptron_trick; w, pred = perceptron_trick([[0,0], [1,1], [2,2]], [-1, -1, 1], 0.5, 5); print([round(x, 3) for x in w], pred)",
    "expected_output": "[1.0, 1.0, 0.0] [-1, -1, 1]"
  },
  {
    "test": "from questions.187_perceptron_trick_logistic_regression.solution import perceptron_trick; w, pred = perceptron_trick([[1], [2], [3]], [1, 1, -1], 0.1, 20); print([round(x, 3) for x in w], pred)",
    "expected_output": "[-0.2, 0.0] [1, 1, -1]"
  },
  {
    "test": "from questions.187_perceptron_trick_logistic_regression.solution import perceptron_trick; w, pred = perceptron_trick([[0,0], [1,0], [0,1], [1,1]], [1, 1, 1, -1], 0.1, 50); print([round(x, 3) for x in w], pred)",
    "expected_output": "[-0.1, -0.1, 0.0] [1, 1, 1, -1]"
  },
  {
    "test": "from questions.187_perceptron_trick_logistic_regression.solution import perceptron_trick; w, pred = perceptron_trick([[1,2], [3,4], [5,6]], [1, 1, -1], 0.01, 100); print([round(x, 3) for x in w], pred)",
    "expected_output": "[-0.04, -0.04, 0.0] [1, 1, -1]"
  },
  {
    "test": "from questions.187_perceptron_trick_logistic_regression.solution import perceptron_trick; w, pred = perceptron_trick([], [], 0.1, 10); print(w, pred)",
    "expected_output": "[] []"
  }
]
